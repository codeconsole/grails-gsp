buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails:grails-docs:${project.ext.properties.grailsDocsVersion ?: grailsVersion}"
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.39.0"
        classpath "se.patrikerdes:gradle-use-latest-versions-plugin:0.2.17"
    }
}

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

version project.projectVersion

ext {
    commonBuild = 'https://raw.githubusercontent.com/grails/grails-common-build/master'
}

apply plugin:'idea'

subprojects {

    apply plugin: 'se.patrikerdes.use-latest-versions'
    apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin

    version project.projectVersion

    ext {
        userOrg = "grails"
        isGrailsPlugin = name.startsWith('grails-plugin')
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    if (isGrailsPlugin) {
        group "org.grails.plugins"
    } else {
        group "org.grails"
    }
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    if (it.name.startsWith("examples")) {
        apply plugin: "org.grails.grails-web"
    } else if (isGrailsPlugin) {
        apply plugin: "org.grails.grails-plugin"
    } else {
        apply from: "${commonBuild}/common-project.gradle"

        dependencies {
            documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
        }
    }

    apply plugin:'idea'
    apply plugin: 'java-library'
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if( details.requested.group == 'org.grails' &&
                    details.requested.name in ['grails-datastore-core',
                                               'grails-datastore-async',
                                               'grails-datastore-gorm',
                                               'grails-datastore-gorm-async',
                                               'grails-datastore-gorm-rx',
                                               'grails-datastore-gorm-support',
                                               'grails-datastore-gorm-tck',
                                               'grails-datastore-gorm-test',
                                               'grails-datastore-gorm-validation',
                                               'grails-datastore-web']
            ) {
                details.useVersion(datastoreVersion)
            } else if (details.requested.group == "org.springframework") {
                details.useVersion(springVersion)
            } else if (details.requested.group == "org.springframework.boot") {
                details.useVersion(springBootVersion)
            } else if (details.requested.group == "org.spockframework") {
                details.useVersion(spockVersion)
            }
        }
    }

    dependencies {
        compileOnly "javax.servlet:javax.servlet-api:$servletApiVersion"

        testImplementation "javax.servlet:javax.servlet-api:$servletApiVersion"
        testImplementation "org.codehaus.groovy:groovy-test-junit5:${groovyVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.0"
        testImplementation "org.junit.platform:junit-platform-runner:1.8.0"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.0"
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    tasks.named("dependencyUpdates").configure {com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask task->

        // disallow release candidates as upgradable versions from stable versions
        task.rejectVersionIf {
            isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
        }
    }

    useLatestVersions {
        updateRootProperties = true
    }
}

apply from: "${commonBuild}/common-docs.gradle"
apply from: "${commonBuild}/common-publishing.gradle"

boolean isNonStable(String version) {
    version ==~ /(?i).+(-|\.?)(b|M|RC|Dev)\d?.*/ ||
            ['alpha', 'beta', 'milestone', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
            }
}
